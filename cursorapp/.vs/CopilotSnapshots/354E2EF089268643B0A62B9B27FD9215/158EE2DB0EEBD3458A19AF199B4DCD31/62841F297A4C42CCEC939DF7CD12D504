using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LoginApp.Data;
using LoginApp.Models;

namespace LoginApp.Controllers
{
    [Authorize]
    public class ProfileController : Controller
    {
        private readonly ApplicationDbContext _context;

        public ProfileController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> Index()
        {
            // Get all skills from the database
            var skills = await _context.Skills
                .OrderBy(s => s.SkillName)
                .ToListAsync();

            return View(skills);
        }

        [HttpGet]
        public async Task<IActionResult> SkillView()
        {
            // Get all skills from the Skill table (singular)
            var skills = await _context.Skill
                .OrderBy(s => s.SkillName)
                .ToListAsync();

            // Get existing employee skills for EmployeeID 101
            var existingEmployeeSkills = await _context.EmployeeSkills
                .Where(es => es.EmployeeID == 101)
                .Include(es => es.Skill)
                .ToListAsync();

            var viewModel = new SkillViewViewModel
            {
                Skills = skills,
                ExistingEmployeeSkills = existingEmployeeSkills
            };

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> RateSkill(int skillId, int skillLevel, int yearsOfExperience, DateTime lastWorkedDate)
        {
            try
            {
                // Check if employee skill already exists
                var existingEmployeeSkill = await _context.EmployeeSkills
                    .FirstOrDefaultAsync(es => es.EmployeeID == 101 && es.SkillID == skillId);

                if (existingEmployeeSkill != null)
                {
                    // Update existing record
                    existingEmployeeSkill.EmployeeRatedSkillLevel = skillLevel;
                    existingEmployeeSkill.YearsOfExperience = yearsOfExperience;
                    existingEmployeeSkill.EmployeeLastWorkedOnThisSkill = lastWorkedDate;
                    existingEmployeeSkill.EmployeeSkillModifiedDate = DateTime.Today;
                }
                else
                {
                    // Create new record
                    var employeeSkill = new EmployeeSkills
                    {
                        EmployeeID = 101,
                        SkillID = skillId,
                        EmployeeRatedSkillLevel = skillLevel,
                        YearsOfExperience = yearsOfExperience,
                        EmployeeLastWorkedOnThisSkill = lastWorkedDate,
                        EmployeeSkillModifiedDate = DateTime.Today,
                        SupervisorRatedSkillLevel = null,
                        SupervisorRatingUpdatedOn = null,
                        AIEvaluatedScore = null,
                        AIEvaluationDate = null,
                        AIEvaluationRemarks = null
                    };

                    _context.EmployeeSkills.Add(employeeSkill);
                }

                await _context.SaveChangesAsync();

                return Json(new { success = true, message = "Skill rating saved successfully!" });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = "Error saving skill rating: " + ex.Message });
            }
        }

        [HttpPost]
        public async Task<IActionResult> UploadResume(IFormFile resume)
        {
            if (resume == null || resume.Length == 0)
            {
                ModelState.AddModelError("Resume", "Please select a file.");
                return RedirectToAction("Index");
            }

            var allowedExtensions = new[] { ".pdf", ".doc", ".docx" };
            var extension = Path.GetExtension(resume.FileName).ToLowerInvariant();
            if (!allowedExtensions.Contains(extension))
            {
                ModelState.AddModelError("Resume", "Only PDF and DOC/DOCX files are allowed.");
                return RedirectToAction("Index");
            }

            var uploads = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "resumes");
            if (!Directory.Exists(uploads))
                Directory.CreateDirectory(uploads);

            var filePath = Path.Combine(uploads, User.Identity?.Name + extension);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await resume.CopyToAsync(stream);
            }

            ViewBag.Message = "Resume uploaded successfully!";
            return RedirectToAction("Index");
        }
    }

    public class SkillViewViewModel
    {
        public List<Skill> Skills { get; set; } = new();
        public List<EmployeeSkills> ExistingEmployeeSkills { get; set; } = new();
    }
}