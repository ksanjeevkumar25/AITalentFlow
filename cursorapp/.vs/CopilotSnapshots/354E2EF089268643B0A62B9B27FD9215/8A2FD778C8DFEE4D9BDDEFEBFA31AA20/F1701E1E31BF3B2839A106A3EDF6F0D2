using System.Data;
using Microsoft.Data.SqlClient;
using LoginApp.Models;
using System.Collections.Generic;

namespace LoginApp.Data
{
    public class SqlDataAccess
    {
        private readonly string _connectionString;
        public SqlDataAccess(string connectionString)
        {
            _connectionString = connectionString;
        }

        // Skill CRUD
        public List<Skill> GetSkills()
        {
            var skills = new List<Skill>();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand("SELECT SkillID, SkillName, SkillDescription FROM Skill ORDER BY SkillName", conn))
            {
                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        skills.Add(new Skill
                        {
                            SkillID = reader.GetInt32(0),
                            SkillName = reader.GetString(1),
                            SkillDescription = reader.IsDBNull(2) ? null : reader.GetString(2)
                        });
                    }
                }
            }
            return skills;
        }

        // EmployeeSkills CRUD
        public List<EmployeeSkills> GetEmployeeSkills(int employeeId)
        {
            var list = new List<EmployeeSkills>();
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand("SELECT * FROM EmployeeSkills WHERE EmployeeID = @EmployeeID", conn))
            {
                cmd.Parameters.AddWithValue("@EmployeeID", employeeId);
                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        list.Add(new EmployeeSkills
                        {
                            EmployeeSkillID = reader.GetInt32(reader.GetOrdinal("EmployeeSkillID")),
                            EmployeeID = reader.GetInt32(reader.GetOrdinal("EmployeeID")),
                            SkillID = reader.GetInt32(reader.GetOrdinal("SkillID")),
                            EmployeeRatedSkillLevel = reader["EmployeeRatedSkillLevel"] as int?,
                            EmployeeSkillModifiedDate = reader["EmployeeSkillModifiedDate"] as DateTime?,
                            YearsOfExperience = reader["YearsOfExperience"] as int?,
                            SupervisorRatedSkillLevel = reader["SupervisorRatedSkillLevel"] as int?,
                            SupervisorRatingUpdatedOn = reader["SupervisorRatingUpdatedOn"] as DateTime?,
                            AIEvaluatedScore = reader["AIEvaluatedScore"] as int?,
                            AIEvaluationDate = reader["AIEvaluationDate"] as DateTime?,
                            AIEvaluationRemarks = reader["AIEvaluationRemarks"] as string,
                            EmployeeLastWorkedOnThisSkill = reader["EmployeeLastWorkedOnThisSkill"] as DateTime?
                        });
                    }
                }
            }
            return list;
        }

        public void InsertEmployeeSkill(EmployeeSkills skill)
        {
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand(@"INSERT INTO EmployeeSkills (EmployeeID, SkillID, EmployeeRatedSkillLevel, EmployeeSkillModifiedDate, YearsOfExperience, SupervisorRatedSkillLevel, SupervisorRatingUpdatedOn, AIEvaluatedScore, AIEvaluationDate, AIEvaluationRemarks, EmployeeLastWorkedOnThisSkill) VALUES (@EmployeeID, @SkillID, @EmployeeRatedSkillLevel, @EmployeeSkillModifiedDate, @YearsOfExperience, @SupervisorRatedSkillLevel, @SupervisorRatingUpdatedOn, @AIEvaluatedScore, @AIEvaluationDate, @AIEvaluationRemarks, @EmployeeLastWorkedOnThisSkill)", conn))
            {
                cmd.Parameters.AddWithValue("@EmployeeID", skill.EmployeeID);
                cmd.Parameters.AddWithValue("@SkillID", skill.SkillID);
                cmd.Parameters.AddWithValue("@EmployeeRatedSkillLevel", (object?)skill.EmployeeRatedSkillLevel ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@EmployeeSkillModifiedDate", (object?)skill.EmployeeSkillModifiedDate ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@YearsOfExperience", (object?)skill.YearsOfExperience ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@SupervisorRatedSkillLevel", (object?)skill.SupervisorRatedSkillLevel ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@SupervisorRatingUpdatedOn", (object?)skill.SupervisorRatingUpdatedOn ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@AIEvaluatedScore", (object?)skill.AIEvaluatedScore ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@AIEvaluationDate", (object?)skill.AIEvaluationDate ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@AIEvaluationRemarks", (object?)skill.AIEvaluationRemarks ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@EmployeeLastWorkedOnThisSkill", (object?)skill.EmployeeLastWorkedOnThisSkill ?? DBNull.Value);
                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }

        public void UpdateEmployeeSkill(EmployeeSkills skill)
        {
            using (var conn = new SqlConnection(_connectionString))
            using (var cmd = new SqlCommand(@"UPDATE EmployeeSkills SET EmployeeRatedSkillLevel=@EmployeeRatedSkillLevel, YearsOfExperience=@YearsOfExperience, EmployeeLastWorkedOnThisSkill=@EmployeeLastWorkedOnThisSkill, EmployeeSkillModifiedDate=@EmployeeSkillModifiedDate WHERE EmployeeID=@EmployeeID AND SkillID=@SkillID", conn))
            {
                cmd.Parameters.AddWithValue("@EmployeeID", skill.EmployeeID);
                cmd.Parameters.AddWithValue("@SkillID", skill.SkillID);
                cmd.Parameters.AddWithValue("@EmployeeRatedSkillLevel", (object?)skill.EmployeeRatedSkillLevel ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@YearsOfExperience", (object?)skill.YearsOfExperience ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@EmployeeLastWorkedOnThisSkill", (object?)skill.EmployeeLastWorkedOnThisSkill ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@EmployeeSkillModifiedDate", (object?)skill.EmployeeSkillModifiedDate ?? DBNull.Value);
                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }

        // Add similar methods for UserSkill CRUD as needed
    }
}
