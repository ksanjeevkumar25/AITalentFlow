@page "/interview"
@using AIInterviewer.Core.Models
@inject IHttpClientFactory HttpClientFactory

<h3>AI Interviewer</h3>

@if (!started)
{
    <div>
        <label>Candidate ID: <input @bind="candidateId" /></label><br />
        <label>Candidate Name: <input @bind="candidateName" /></label><br />
        <label>Skills (comma separated): <input @bind="skillsInput" /></label><br />
        <label>Experience (years): <input type="number" @bind="experience" /></label><br />
        <label>Expert Level:</label>
        <select @bind="expertLevel">
            <option value="0">Beginner</option>
            <option value="1">Proficient</option>
            <option value="2">Expert</option>
        </select>
        <br />
        <label>Number of Questions: <input type="number" @bind="questionCountInput" /></label><br />
        <button class="btn btn-primary" @onclick="StartInterview">Start Interview</button>
    </div>
}
else if (currentQuestion != null && questionCount < maxQuestions)
{
    <div class="card mt-3 p-3">
        <h5>Question @(@questionCount + 1) of @maxQuestions</h5>
        <p><b>@currentQuestion.Question</b></p>
        <form onsubmit="return false;">
            <div>
                @for (int i = 0; i < currentQuestion.Choices.Count; i++)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="choice@i" name="choices"
                               value="@i" @onchange="() => selectedChoice = i" checked="@(selectedChoice == i)" />
                        <label class="form-check-label" for="choice@i">
                            @currentQuestion.Choices[i]
                        </label>
                    </div>
                }
            </div>
            <button class="btn btn-success mt-2" type="button" @onclick="SubmitAnswer" disabled="@answered">Submit</button>
        </form>
        @if (!string.IsNullOrEmpty(status))
        {
            <div class="alert alert-info mt-2">@status</div>
        }
    </div>
}
else if (currentQuestion == null && started)
{
    <div class="alert alert-success mt-3">
        <h4>Interview complete!</h4>
        <p>You answered @questionCount questions.</p>
        <p>Score: @correctAnswers / @(maxQuestions)</p>
        <p>Result: @GetResultText(correctAnswers)</p>
        <h5>Skill-wise Scores:</h5>
        @if (session?.SkillScores != null)
        {
            <ul>
                @foreach (var kvp in session.SkillScores)
                {
                    <li>@kvp.Key: @kvp.Value</li>
                }
            </ul>
        }
    </div>
}

@code {
    string candidateId = "";
    string candidateName = "";
    string skillsInput = ""; // e.g. "Dotnet, Csharp, Azure, AWS"
    int experience = 0;
    int expertLevel = 0;
    int questionCountInput = 10;
    bool started = false;
    bool answered = false;
    InterviewQuestionDto? currentQuestion;
    string status = "";
    int selectedChoice = -1;
    int questionCount = 0;
    int correctAnswers = 0;
    InterviewSessionDto? session;

    public class InterviewQuestionDto
    {
        public string Skill { get; set; }
        public string Question { get; set; }
        public List<string> Choices { get; set; }
        public int CorrectChoiceIndex { get; set; }
    }

    public class InterviewSessionDto
    {
        public Dictionary<string, int> SkillScores { get; set; } = new Dictionary<string, int>();
        public InterviewQuestionDto? CurrentQuestion { get; set; } // Add this property
    }

    class NextQuestionResponse
    {
        public Dictionary<string, int> SkillScores { get; set; }
        public InterviewQuestionDto CurrentQuestion { get; set; }
        public int CorrectAnswers { get; set; }
    }

    async Task StartInterview()
    {
        var client = HttpClientFactory.CreateClient("AIInterviewerAPI");
        var req = new
        {
            Id = candidateId,
            Name = candidateName,
            Skill = skillsInput,
            ExpertLevel = expertLevel,
            QuestionCount = questionCountInput
        };
        var resp = await client.PostAsJsonAsync("api/interview/start", req);
        if (resp.IsSuccessStatusCode)
        {
            session = await resp.Content.ReadFromJsonAsync<InterviewSessionDto>(); // Assign session here
            currentQuestion = session.CurrentQuestion;
            started = true;
            answered = false;
            status = "";
            selectedChoice = -1;
            questionCount = 0;
            correctAnswers = 0;
            StateHasChanged();
        }
        else
        {
            status = "Could not start interview.";
        }
    }

    async Task SubmitAnswer()
    {
        var client = HttpClientFactory.CreateClient("AIInterviewerAPI");
        var req = new
        {
            CandidateId = candidateId, // Use candidateId, not candidateName
            SelectedChoice = selectedChoice
        };
        var resp = await client.PostAsJsonAsync("api/interview/next", req);
        if (resp.IsSuccessStatusCode)
        {
            var result = await resp.Content.ReadFromJsonAsync<NextQuestionResponse>();
            session.SkillScores = result.SkillScores;
            currentQuestion = result.CurrentQuestion;
            correctAnswers = result.CorrectAnswers;
            // Update UI state as needed
            questionCount++;
            answered = false;
            status = "";
            selectedChoice = -1;
            StateHasChanged();
        }
        else
        {
            status = "Error submitting answer.";
        }
    }

    string GetResultText(int correct)
    {
        if (correct >= 18) return "Extra Ordinary";
        if (correct >= 16) return "Excellent";
        if (correct >= 14) return "Very Good";
        if (correct >= 12) return "Good";
        if (correct >= 10) return "Satisfactory";
        if (correct >= 8) return "Qualified";
        return "Needs Improvement";
    }

    int maxQuestions => skillsInput.Split(',', StringSplitOptions.RemoveEmptyEntries).Length * 2;
}
